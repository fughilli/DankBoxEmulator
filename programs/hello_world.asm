_putc@0x1000100:
# Caller context save
PUSH R7
PUSH R8

# Store the print character (R0) to TXBUF
LUH R7 0x5000
STOR R0 R7

# Set the transmit flag
ADDUI R7 R7 8
LUH R8 0
ADDUI R8 R8 1
STOR R8 R7

# Caller context restore
POP R8
POP R7

# Jump unconditionally to link register
JUMP LR

_puts@0x1000200:
# Caller context save
PUSH LR
PUSH R0
PUSH R1

# Move the address to R1
MOV R0 R1

_puts_loop_head:
# Load a byte from the address given in R1 to R0
LOADB R0 R1

BZI R0 _puts_done

BALI _putc

# Increment address
ADDUI R1 R1 1

BI _puts_loop_head

_puts_done:
POP R1
POP R0
POP LR

JUMP LR

_data@0x1000500:
#$b:0x2a
#$b:0x62
#$b:0x75
#$b:0x62
#$b:0x62
#$b:0x6c
#$b:0x69
#$b:0x6e
#$b:0x67
#$b:0x20
#$b:0x6e
#$b:0x6f
#$b:0x69
#$b:0x73
#$b:0x65
#$b:0x73
#$b:0x2a
#$b:0x20
#$b:0x48
#$b:0x65
#$b:0x6c
#$b:0x6c
#$b:0x6f
#$b:0x20
#$b:0x77
#$b:0x6f
#$b:0x72
#$b:0x2d
#$b:0x2d
#$b:0x2a
#$b:0x63
#$b:0x6f
#$b:0x75
#$b:0x67
#$b:0x68
#$b:0x2a
#$b:0x20
#$b:0x2a
#$b:0x63
#$b:0x6f
#$b:0x75
#$b:0x67
#$b:0x68
#$b:0x2a
#$b:0x0a

$b:0x48
$b:0x65
$b:0x6c
$b:0x6c
$b:0x6f
$b:0x20
$b:0x77
$b:0x6f
$b:0x72
$b:0x6c
$b:0x64
$b:0x21
$b:0x0a
$b:0x00

_main@0x1000000:
# Compute the address of the _data section
MOVW R0 _data

# Branch and link to _puts
BALI _puts

# Halt
HALT
